{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"tpu1vmV38","dataSources":[{"sourceId":8130934,"sourceType":"datasetVersion","datasetId":4555568},{"sourceId":8175376,"sourceType":"datasetVersion","datasetId":4839211},{"sourceId":9236131,"sourceType":"datasetVersion","datasetId":5586622}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nimport librosa\nimport numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-24T02:10:59.137247Z","iopub.execute_input":"2024-08-24T02:10:59.137766Z","iopub.status.idle":"2024-08-24T02:11:01.652926Z","shell.execute_reply.started":"2024-08-24T02:10:59.137733Z","shell.execute_reply":"2024-08-24T02:11:01.652180Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"# Function to add noise to an audio sample (data augmentation) \ndef add_noise(audio, noise_factor=0.005):\n    noise = np.random.randn(len(audio))\n    augmented_audio = audio + noise_factor * noise\n    return augmented_audio","metadata":{"execution":{"iopub.status.busy":"2024-08-24T02:11:01.654229Z","iopub.execute_input":"2024-08-24T02:11:01.654601Z","iopub.status.idle":"2024-08-24T02:11:01.658483Z","shell.execute_reply.started":"2024-08-24T02:11:01.654575Z","shell.execute_reply":"2024-08-24T02:11:01.657876Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"# Load audio files and extract features\ndef extract_features(file_path, augment=False):\n    try:\n        audio, sample_rate = librosa.load(file_path, sr=None)\n        if augment:\n            audio = add_noise(audio)  # Apply noise augmentation\n\n        mfccs = librosa.feature.mfcc(y=audio, sr=sample_rate, n_mfcc=13)\n        chroma = librosa.feature.chroma_stft(y=audio, sr=sample_rate)\n        spec_contrast = librosa.feature.spectral_contrast(y=audio, sr=sample_rate)\n\n        features = np.hstack([\n            np.mean(mfccs.T, axis=0),\n            np.mean(chroma.T, axis=0),\n            np.mean(spec_contrast.T, axis=0)\n        ])\n        return features\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n        return None","metadata":{"execution":{"iopub.status.busy":"2024-08-24T02:11:01.659238Z","iopub.execute_input":"2024-08-24T02:11:01.659443Z","iopub.status.idle":"2024-08-24T02:11:01.669477Z","shell.execute_reply.started":"2024-08-24T02:11:01.659421Z","shell.execute_reply":"2024-08-24T02:11:01.668861Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"# Function to process files concurrently using ThreadPoolExecutor\ndef process_files_concurrently(file_paths, label, augment=False):\n    features_list = []\n    labels_list = []\n\n    with ThreadPoolExecutor() as executor:\n        futures = {executor.submit(extract_features, file, augment): file for file in file_paths}\n        for future in as_completed(futures):\n            features = future.result()\n            if features is not None:\n                features_list.append(features)\n                labels_list.append(label)\n\n                if augment:\n                    augmented_features = extract_features(futures[future], augment=True)\n                    if augmented_features is not None:\n                        features_list.append(augmented_features)\n                        labels_list.append(label)\n\n    return features_list, labels_list","metadata":{"execution":{"iopub.status.busy":"2024-08-24T02:11:01.670898Z","iopub.execute_input":"2024-08-24T02:11:01.671147Z","iopub.status.idle":"2024-08-24T02:11:01.680486Z","shell.execute_reply.started":"2024-08-24T02:11:01.671125Z","shell.execute_reply":"2024-08-24T02:11:01.679720Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"# Function to process each folder separately\ndef process_folder(folder_name, folder_path, batch_size=50):\n    print(f\"Processing folder: {folder_name}\")\n\n    # Prepare paths for training, testing, and validation\n    train_real_path = os.path.join(folder_path, 'training/real')\n    train_fake_path = os.path.join(folder_path, 'training/fake')\n    test_real_path = os.path.join(folder_path, 'testing/real')\n    test_fake_path = os.path.join(folder_path, 'testing/fake')\n    val_real_path = os.path.join(folder_path, 'validation/real')\n    val_fake_path = os.path.join(folder_path, 'validation/fake')\n\n    # Collect all the file paths\n    train_real_files = [os.path.join(train_real_path, file) for file in os.listdir(train_real_path) if file.endswith('.wav')]\n    train_fake_files = [os.path.join(train_fake_path, file) for file in os.listdir(train_fake_path) if file.endswith('.wav')]\n    test_real_files = [os.path.join(test_real_path, file) for file in os.listdir(test_real_path) if file.endswith('.wav')]\n    test_fake_files = [os.path.join(test_fake_path, file) for file in os.listdir(test_fake_path) if file.endswith('.wav')]\n    val_real_files = [os.path.join(val_real_path, file) for file in os.listdir(val_real_path) if file.endswith('.wav')]\n    val_fake_files = [os.path.join(val_fake_path, file) for file in os.listdir(val_fake_path) if file.endswith('.wav')]\n\n    # Initialize lists for training, testing, and validation features and labels\n    X_train, y_train, X_test, y_test, X_val, y_val = [], [], [], [], [], []\n\n    # Process training files in batches\n    for i in range(0, len(train_real_files), batch_size):\n        batch_real = train_real_files[i:i+batch_size]\n        real_train_features, real_train_labels = process_files_concurrently(batch_real, 0)\n        X_train.extend(real_train_features)\n        y_train.extend(real_train_labels)\n\n        batch_fake = train_fake_files[i:i+batch_size]\n        fake_train_features, fake_train_labels = process_files_concurrently(batch_fake, 1)\n        X_train.extend(fake_train_features)\n        y_train.extend(fake_train_labels)\n\n    # Process testing files\n    test_real_features, test_real_labels = process_files_concurrently(test_real_files, 0)\n    X_test.extend(test_real_features)\n    y_test.extend(test_real_labels)\n\n    test_fake_features, test_fake_labels = process_files_concurrently(test_fake_files, 1)\n    X_test.extend(test_fake_features)\n    y_test.extend(test_fake_labels)\n\n    # Process validation files\n    val_real_features, val_real_labels = process_files_concurrently(val_real_files, 0)\n    X_val.extend(val_real_features)\n    y_val.extend(val_real_labels)\n\n    val_fake_features, val_fake_labels = process_files_concurrently(val_fake_files, 1)\n    X_val.extend(val_fake_features)\n    y_val.extend(val_fake_labels)\n\n    return X_train, y_train, X_test, y_test, X_val, y_val","metadata":{"execution":{"iopub.status.busy":"2024-08-24T02:11:01.681500Z","iopub.execute_input":"2024-08-24T02:11:01.681767Z","iopub.status.idle":"2024-08-24T02:11:01.705661Z","shell.execute_reply.started":"2024-08-24T02:11:01.681741Z","shell.execute_reply":"2024-08-24T02:11:01.704992Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"# Define the paths for the different folders\nbase_path = '/kaggle/input/the-fake-or-real-dataset'\nfolders = {\n    'for-2sec': os.path.join(base_path, 'for-2sec/for-2seconds'),\n    'for-norm': os.path.join(base_path, 'for-norm/for-norm'),\n    'for-original': os.path.join(base_path, 'for-original/for-original'),\n    'for-rebec': os.path.join(base_path, 'for-rerec/for-rerecorded')\n}\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-24T02:11:01.706499Z","iopub.execute_input":"2024-08-24T02:11:01.706737Z","iopub.status.idle":"2024-08-24T02:11:01.718675Z","shell.execute_reply.started":"2024-08-24T02:11:01.706712Z","shell.execute_reply":"2024-08-24T02:11:01.717998Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"# Define the paths for the scenefake dataset\nscenefake_path = '/kaggle/input/scenefake'\nscenefake_folders = {\n    'scenefake_train_real': os.path.join(scenefake_path, 'train/real'),\n    'scenefake_train_fake': os.path.join(scenefake_path, 'train/fake'),\n    'scenefake_test_real': os.path.join(scenefake_path, 'test/real'),\n    'scenefake_test_fake': os.path.join(scenefake_path, 'test/fake'),\n    'scenefake_val_real': os.path.join(scenefake_path, 'val/real'),\n    'scenefake_val_fake': os.path.join(scenefake_path, 'val/fake')\n}","metadata":{"execution":{"iopub.status.busy":"2024-08-24T02:11:01.719579Z","iopub.execute_input":"2024-08-24T02:11:01.719834Z","iopub.status.idle":"2024-08-24T02:11:01.731328Z","shell.execute_reply.started":"2024-08-24T02:11:01.719808Z","shell.execute_reply":"2024-08-24T02:11:01.730535Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# Define the scenefake folder paths\nscenefake_folders = {\n    'scenefake_train_real': '/kaggle/input/scenefake/train/real',\n    'scenefake_train_fake': '/kaggle/input/scenefake/train/fake',\n    'scenefake_test_real': '/kaggle/input/scenefake/eval/real',\n    'scenefake_test_fake': '/kaggle/input/scenefake/eval/fake',\n    'scenefake_val_real': '/kaggle/input/scenefake/dev/real',\n    'scenefake_val_fake': '/kaggle/input/scenefake/dev/fake'\n}\n","metadata":{"execution":{"iopub.status.busy":"2024-08-24T02:11:01.732494Z","iopub.execute_input":"2024-08-24T02:11:01.732867Z","iopub.status.idle":"2024-08-24T02:11:01.741220Z","shell.execute_reply.started":"2024-08-24T02:11:01.732824Z","shell.execute_reply":"2024-08-24T02:11:01.740494Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"# Function to process the scenefake dataset\ndef process_scenefake_folder(scenefake_folders):\n    X_train, y_train, X_test, y_test, X_val, y_val = [], [], [], [], [], []\n\n    # Define the paths for training, testing, and validation\n    train_real_path = scenefake_folders['scenefake_train_real']\n    train_fake_path = scenefake_folders['scenefake_train_fake']\n    test_real_path = scenefake_folders['scenefake_test_real']\n    test_fake_path = scenefake_folders['scenefake_test_fake']\n    val_real_path = scenefake_folders['scenefake_val_real']\n    val_fake_path = scenefake_folders['scenefake_val_fake']\n\n    # Collect all the file paths\n    train_real_files = [os.path.join(train_real_path, file) for file in os.listdir(train_real_path) if file.endswith('.wav')]\n    train_fake_files = [os.path.join(train_fake_path, file) for file in os.listdir(train_fake_path) if file.endswith('.wav')]\n    test_real_files = [os.path.join(test_real_path, file) for file in os.listdir(test_real_path) if file.endswith('.wav')]\n    test_fake_files = [os.path.join(test_fake_path, file) for file in os.listdir(test_fake_path) if file.endswith('.wav')]\n    val_real_files = [os.path.join(val_real_path, file) for file in os.listdir(val_real_path) if file.endswith('.wav')]\n    val_fake_files = [os.path.join(val_fake_path, file) for file in os.listdir(val_fake_path) if file.endswith('.wav')]\n\n    # Process files and update lists\n    real_train_features, real_train_labels = process_files_concurrently(train_real_files, 0)\n    fake_train_features, fake_train_labels = process_files_concurrently(train_fake_files, 1)\n    X_train.extend(real_train_features)\n    y_train.extend(real_train_labels)\n    X_train.extend(fake_train_features)\n    y_train.extend(fake_train_labels)\n\n    real_test_features, real_test_labels = process_files_concurrently(test_real_files, 0)\n    fake_test_features, fake_test_labels = process_files_concurrently(test_fake_files, 1)\n    X_test.extend(real_test_features)\n    y_test.extend(real_test_labels)\n    X_test.extend(fake_test_features)\n    y_test.extend(fake_test_labels)\n\n    real_val_features, real_val_labels = process_files_concurrently(val_real_files, 0)\n    fake_val_features, fake_val_labels = process_files_concurrently(val_fake_files, 1)\n    X_val.extend(real_val_features)\n    y_val.extend(real_val_labels)\n    X_val.extend(fake_val_features)\n    y_val.extend(fake_val_labels)\n\n    return X_train, y_train, X_test, y_test, X_val, y_val\n\n# Initialize overall data lists for each step\noverall_X_train, overall_y_train, overall_X_test, overall_y_test, overall_X_val, overall_y_val = [], [], [], [], [], []\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-24T02:11:01.742378Z","iopub.execute_input":"2024-08-24T02:11:01.742783Z","iopub.status.idle":"2024-08-24T02:11:01.755206Z","shell.execute_reply.started":"2024-08-24T02:11:01.742711Z","shell.execute_reply":"2024-08-24T02:11:01.754238Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"# Process the scenefake dataset\nprint(\"Processing dataset from: scenefake\")\nX_train, y_train, X_test, y_test, X_val, y_val = process_scenefake_folder(scenefake_folders)\noverall_X_train.extend(X_train)\noverall_y_train.extend(y_train)\noverall_X_test.extend(X_test)\noverall_y_test.extend(y_test)\noverall_X_val.extend(X_val)\noverall_y_val.extend(y_val)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-24T02:11:01.758480Z","iopub.execute_input":"2024-08-24T02:11:01.758819Z","iopub.status.idle":"2024-08-24T02:37:23.001046Z","shell.execute_reply.started":"2024-08-24T02:11:01.758792Z","shell.execute_reply":"2024-08-24T02:37:23.000150Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Processing dataset from: scenefake\n","output_type":"stream"}]},{"cell_type":"code","source":"# Process each folder in sequence\nfor folder_name, folder_path in folders.items():\n    print(f\"Processing dataset from: {folder_name}\")\n    \n    X_train, y_train, X_test, y_test, X_val, y_val = process_folder(folder_name, folder_path, batch_size=50)\n    \n    # Update overall data lists\n    overall_X_train.extend(X_train)\n    overall_y_train.extend(y_train)\n    overall_X_test.extend(X_test)\n    overall_y_test.extend(y_test)\n    overall_X_val.extend(X_val)\n    overall_y_val.extend(y_val)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-24T02:37:23.002117Z","iopub.execute_input":"2024-08-24T02:37:23.002501Z","iopub.status.idle":"2024-08-24T03:42:47.897034Z","shell.execute_reply.started":"2024-08-24T02:37:23.002474Z","shell.execute_reply":"2024-08-24T03:42:47.895873Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Processing dataset from: for-2sec\nProcessing folder: for-2sec\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/site-packages/librosa/core/pitch.py:101: UserWarning: Trying to estimate tuning from empty frequency set.\n  return pitch_tuning(\n","output_type":"stream"},{"name":"stdout","text":"Processing dataset from: for-norm\nProcessing folder: for-norm\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1837\n  warnings.warn(\n/usr/local/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=0\n  warnings.warn(\n/usr/local/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1891\n  warnings.warn(\n/usr/local/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1690\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Processing dataset from: for-original\nProcessing folder: for-original\nProcessing dataset from: for-rebec\nProcessing folder: for-rebec\n","output_type":"stream"}]},{"cell_type":"code","source":"# Train the Random Forest model on the combined dataset\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\nmodel.fit(overall_X_train, overall_y_train)\n\n# Make predictions on the test set\ny_pred = model.predict(overall_X_test)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-24T03:42:47.898342Z","iopub.execute_input":"2024-08-24T03:42:47.898662Z","iopub.status.idle":"2024-08-24T03:44:37.136288Z","shell.execute_reply.started":"2024-08-24T03:42:47.898633Z","shell.execute_reply":"2024-08-24T03:44:37.135043Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"# Evaluate the model with additional metrics\naccuracy = accuracy_score(overall_y_test, y_pred)\nprecision = precision_score(overall_y_test, y_pred)\nrecall = recall_score(overall_y_test, y_pred)\nf1 = f1_score(overall_y_test, y_pred)\n\nprint(f\"Overall Results:\")\nprint(f\"Accuracy: {accuracy:.4f}\")\nprint(f\"Precision: {precision:.4f}\")\nprint(f\"Recall: {recall:.4f}\")\nprint(f\"F1-score: {f1:.4f}\\n\")","metadata":{"execution":{"iopub.status.busy":"2024-08-24T03:44:37.137554Z","iopub.execute_input":"2024-08-24T03:44:37.137850Z","iopub.status.idle":"2024-08-24T03:44:37.202770Z","shell.execute_reply.started":"2024-08-24T03:44:37.137823Z","shell.execute_reply":"2024-08-24T03:44:37.202005Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Overall Results:\nAccuracy: 0.7796\nPrecision: 0.9256\nRecall: 0.7595\nF1-score: 0.8344\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# Function to predict if a new audio file is fake or real\ndef predict_fake_audio(file_path):\n    features = extract_features(file_path)\n    if features is None:\n        return \"Error in processing audio file.\"\n\n    prediction = model.predict([features])[0]\n    if prediction == 0:\n        return \"Real audio\"\n    else:\n        return \"Fake audio\"","metadata":{"execution":{"iopub.status.busy":"2024-08-24T03:44:37.203986Z","iopub.execute_input":"2024-08-24T03:44:37.204304Z","iopub.status.idle":"2024-08-24T03:44:37.208885Z","shell.execute_reply.started":"2024-08-24T03:44:37.204273Z","shell.execute_reply":"2024-08-24T03:44:37.208213Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"# Example usage:\nnew_audio_file = input(\"Enter the path to the audio file you want to check: \")\n\n# Ensure that the file exists\nif os.path.exists(new_audio_file):\n    result = predict_fake_audio(new_audio_file)\n    print(f\"The prediction for the audio file is: {result}\")\nelse:\n    print(\"The specified file does not exist. Please check the path and try again.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-08-24T03:45:36.403007Z","iopub.execute_input":"2024-08-24T03:45:36.403382Z","iopub.status.idle":"2024-08-24T03:45:39.892603Z","shell.execute_reply.started":"2024-08-24T03:45:36.403353Z","shell.execute_reply":"2024-08-24T03:45:39.891665Z"},"trusted":true},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdin","text":"Enter the path to the audio file you want to check:  /kaggle/input/random-audio/C_0001_20_B.wav\n"},{"name":"stdout","text":"The prediction for the audio file is: Real audio\n","output_type":"stream"}]}]}